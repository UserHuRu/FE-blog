step 1- 为什么前端需要模块化？

 问题 全局变量命名冲突：原始的前端，js文件是共享作用域的。当想在多个js文件之间通讯是，可能会把一个变量挂在到window上，变成 一个全局变量。当全局变量很多时，容易出现命名冲突，很难维护。
 => 要限制作用域，并且 移除全局变量
 问题： js文件间依赖关系混乱问题。
 => 通过规定一些特殊的语法，来在代码中声明依赖关系，再开发一个工具来自动化处理文件之间的依赖，就可以解决依赖混乱的问题
 
 以上做法我们称为 模块化。
 
 我们把每一个 .js 文件都视为一个 模块，
 模块内部有自己的作用域，不会影响到全局。
 约定一些关键词来进行依赖声明和 API 暴露。这些约定的关键词就是通过制定一些 规范 去进行规范的
 
 ------------元气满满------------------
 目前模块化规范有：CMD、AMD、CommonJS 和 ES6 Module
 
CommonJS 由于是被 NodeJS 所采用的，所以很多人用；
ES6 Module 自然是ECMAScript 2015 所采用的了，以后会逐渐成为最主要的模块化规范；

=> CommonJS语法
module.exports = {
  bar: 123
}

require('foo.js') // 返回 { bar: 123 }

------------元气满满--------------------
有了规范，需要工
